<project name="OpenElis" default="test" basedir=".">
    <description>
        OpenElis build file. Reason we are not using maven is because the code is not structured according to it.
    </description>
    <presetdef name="javac">
        <javac includeantruntime="false"/>
    </presetdef>
    <property file="build.properties"/>
    <property environment="env"/>
    <condition property="OPENELIS_CONTEXT" value="${env.OPENELIS_CONTEXT}" else="">
        <isset property="env.OPENELIS_CONTEXT" />
    </condition>

    <target name="init">
        <tstamp/>
        <mkdir dir="${target}"/>
    </target>

    <path id="lib">
        <fileset dir="${web}/WEB-INF/lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test.lib">
        <fileset dir="${test.src}/lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="build.lib">
        <fileset dir="build/lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <taskdef name="propertyMerge" classname="org.jugbb.ant.propertymerge.PropertyMergeTask" classpathref="build.lib"/>

    <target name="compile" depends="init"
            description="compile the source ">
        <mkdir dir="${target}"/>
        <javac srcdir="${src}" destdir="${target}" encoding="iso-8859-1" classpathref="lib" source="1.7" target="1.7" debug="on"/>
        <copy todir="${target}">
            <fileset dir="${src}" includes="**/*.xml"/>
        </copy>
    </target>

    <target name="dist" depends="clean, compile"
            description="generate the distribution">
        <mkdir dir="${dist}/lib"/>
        <copy todir="${target}">
            <fileset dir="${src}" includes="**/*.properties"/>
        </copy>
        <propertyMerge
                inputpropertyfile="${target}/MessageResources.properties"
                mergepropertyfile="${target}/${OPENELIS_CONTEXT}MessageResources.properties"
                outputpropertyfile="${target}/MessageResources.properties"
                native2ascii="true"/>
        <war destfile="${dist}/openelis.war">
            <classes dir="${target}"/>
            <fileset dir="${web}"/>
            <lib dir="${dist}/lib"/>
        </war>
    </target>

    <target name="build" depends="clean, compile, resetDB, test, report, dist"/>

    <target name="clean">
        <delete dir="${target}"/>
        <delete dir="${dist}"/>
        <delete dir="${junit.output.dir}"/>
        <delete dir="${test.target}"/>
    </target>

    <target name="setupDB" depends="initDB, updateDB"/>

    <target name="initDB">
        <exec executable="scripts/initDB.sh"/>
    </target>

    <target name="dropDB">
        <exec executable="scripts/dropDB.sh"/>
    </target>

    <target name="resetDB" depends="dropDB, initDB, updateDB"/>

    <target name="updateDB">
        <echo message="Running migration for contexts : Haiti"/>
        <exec executable="java" failonerror="true" dir="${liquibase}">
            <arg line="-jar -Dfile.encoding=utf-8 lib/liquibase-1.9.5.jar --defaultsFile=liquibase.properties --contexts=haiti --url=jdbc:postgresql://localhost:5432/clinlims update"/>
        </exec>
        <echo message="Running migration for contexts : Bahmni"/>
        <exec executable="java" failonerror="true" dir="${liquibase}">
            <arg line="-jar -Dfile.encoding=utf-8 lib/liquibase-1.9.5.jar --defaultsFile=liquibase.properties --contexts=bahmni --url=jdbc:postgresql://localhost:5432/clinlims update"/>
        </exec>
    </target>

    <target name="test" depends="clean, compile, updateDB, test-only" />

    <target name="test-only">
        <mkdir dir="${junit.output.dir}"/>
        <mkdir dir="${test.target}"/>
        <javac srcdir="${test.src}" destdir="${test.target}" encoding="iso-8859-1" debug="on">
            <classpath>
                <dirset dir="${target}"/>
                <path refid="test.lib"/>
                <path refid="lib"/>
            </classpath>
        </javac>
        <copy todir="${test.target}">
            <fileset dir="${test.src}" includes="**/*.json"/>
        </copy>
        <junit printsummary="yes" haltonerror="false" haltonfailure="false"
               showoutput="true" failureproperty="test.failed">
            <classpath>
                <fileset dir="${liquibase}/lib">
                    <include name="*.jar"/>
                </fileset>
                <path refid="test.lib"/>
                <path refid="lib"/>
                <pathelement location="${src}"/>
                <pathelement location="${target}"/>
                <pathelement location="${test.target}"/>
            </classpath>
            <batchtest todir="${junit.output.dir}">
                <formatter type="xml"/>
                <fileset dir="${test.src}">
                    <include name="**/*Test*.java"/>
                    <include name="**/*IT.java"/>
                    <exclude name="**/All*Tests.java"/>
                </fileset>
            </batchtest>
        </junit>
        <fail message="Test failure detected, check test results." if="test.failed"/>
    </target>

    <target name="report">
        <mkdir dir="${junit.output.dir}/html"/>
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${junit.output.dir}/html"/>
        </junitreport>
    </target>
</project>
