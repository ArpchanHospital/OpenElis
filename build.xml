<project name="OpenElis" default="dist" basedir=".">
    <description>
        OpenElis build file
    </description>
    <presetdef name="javac">
        <javac includeantruntime="false" />
    </presetdef>
    <property file="build.properties" />


    <target name="init">
        <tstamp/>
        <mkdir dir="${target}"/>
    </target>

    <path id="lib">
        <fileset dir="${web}/WEB-INF/lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <target name="compile" depends="init"
            description="compile the source ">
        <mkdir dir="${target}"/>
        <javac srcdir="${src}" destdir="${target}" encoding="iso-8859-1" classpathref="lib" source="1.7" target="1.7" debug="on"/>
        <copy todir="${target}">
            <fileset dir="${src}" includes="**/*.xml"/>
        </copy>
    </target>

    <target name="dist" depends="clean, compile"
            description="generate the distribution">
        <mkdir dir="${dist}/lib"/>
        <copy todir="${target}">
            <fileset dir="${src}" includes="**/*.properties"/>
        </copy>
        <war destfile="${dist}/openelis.war">
            <classes dir="${target}"/>
            <fileset dir="${web}"/>
            <lib dir="${dist}/lib"/>
        </war>
    </target>

    <target name="build" depends="clean, compile, test, dist"
            description="run test and generate the distribution">
    </target>

    <target name="clean" description="clean up">
        <delete dir="${target}"/>
        <delete dir="${dist}"/>
        <delete dir="${junit.output.dir}"/>
        <delete dir="${test.target}"/>
    </target>

    <target name="setupDB" depends="initDB, updateDB"></target>

    <target name="initDB">
        <exec executable="scripts/initDB.sh"/>
    </target>

	<target name="dropDB">
        <exec executable="dropdb">
            <arg line="-U postgres clinlims"/>
        </exec>
    </target>

    <target name="resetDB">
		<antcall target="dropDB"/>
		<antcall target="initDB"/>
		<antcall target="updateDB"/>
    </target>


    <target name="updateDB">
        <echo message="Running migration for contexts : Haiti"/>
		<exec executable="java" failonerror="true" dir="${liquibase}">
            <arg line="-jar -Dfile.encoding=utf-8 lib/liquibase-1.9.5.jar --defaultsFile=liquibase.properties  --contexts=haiti --url=jdbc:postgresql://localhost:5432/clinlims update"/>
        </exec>
        <echo message="Running migration for contexts : JSS"/>
        <exec executable="java" failonerror="true" dir="${liquibase}">
            <arg line="-jar -Dfile.encoding=utf-8 lib/liquibase-1.9.5.jar --defaultsFile=liquibase.properties  --contexts=jss --url=jdbc:postgresql://localhost:5432/clinlims update"/>
        </exec>
    </target>

    <target name="test" depends="clean, compile">
        <mkdir dir="${junit.output.dir}"/>
        <mkdir dir="${test.target}"/>
        <javac srcdir="${test.src}" classpathref="lib" destdir="${test.target}" encoding="iso-8859-1" debug="on">
            <classpath>
                <dirset dir="${target}"/>
            </classpath>
        </javac>
        <junit printsummary="yes" haltonerror="false" haltonfailure="false"
               showoutput="true" failureproperty="test.failed">
            <classpath>
                <fileset dir="${web}/WEB-INF/lib">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${liquibase}/lib">
                    <include name="*.jar"/>
                </fileset>
                <pathelement location="${target}"/>
                <pathelement location="${test.target}"/>
            </classpath>
            <batchtest todir="${junit.output.dir}">
                <formatter type="xml"/>
                <fileset dir="${test.src}">
                    <include name="**/*Test*.java"/>
                    <exclude name="**/All*Tests.java"/>
                </fileset>
            </batchtest>
        </junit>
        <fail message="Test failure detected, check test results." if="test.failed" />
    </target>

    <target name="report" depends="test">
        <mkdir dir="${junit.output.dir}/html"/>
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${junit.output.dir}/html"/>
        </junitreport>
    </target>

</project>